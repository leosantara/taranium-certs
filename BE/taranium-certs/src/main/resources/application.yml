# src/main/resources/application.yml

server:
  port: 8080 # Port aplikasi backend

spring:
  application:
    name: taranium-certs-backend
  # Konfigurasi H2 Database (in-memory)
  datasource:
    url: jdbc:h2:mem:taraniumcertsdb # URL database H2 in-memory
    driverClassName: org.h2.Driver
    username: sa
    password: password
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect # Dialek Hibernate untuk H2
    hibernate:
      ddl-auto: update # Otomatis update skema database
    show-sql: true # Tampilkan query SQL di konsol (untuk debug)

  # Hapus semua konfigurasi 'security.oauth2.client' yang lama di sini.
  # Bagian ini sudah tidak dibutuhkan lagi karena login di-handle oleh frontend.
  # security:
  #   oauth2:
  #     client:
  #       registration:
  #         google:
  #           client-id: ...
  #           client-secret: ...
  #           redirect-uri: ...
  #           scope: ...
  #       provider:
  #         google:
  #           authorization-uri: ...
  #           token-uri: ...
  #           user-info-uri: ...
  #           jwk-set-uri: ...

  web: # <--- Perhatikan bahwa 'web' ada di bawah 'spring' (tidak mengulang 'spring' di luar).
    cors:
      allowed-origins: http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173 # Izinkan dari port frontend Anda
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS # Metode HTTP yang diizinkan
      allowed-headers: "*" # Header yang diizinkan
      allow-credentials: true # Penting untuk pengiriman cookie sesi

# Konfigurasi aplikasi kustom
app:
  upload-dir: ./uploads # Direktori untuk menyimpan file yang diupload
  google: # <--- BAGIAN INI SANGAT PENTING DAN HARUS ADA!
    client-id: 62795694598-tmpm5o5i3jsa8sn0nf748r6v0e0o1kf1.apps.googleusercontent.com # <--- Client ID yang digunakan untuk verifikasi ID Token
      # Tempelkan Client ID yang Anda gunakan di frontend atau backend sebelumnya di sini.
    # PASTIKAN TIDAK ADA SPASI TAMBAHAN DI AKHIR NILAI ID!
